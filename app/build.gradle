plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdk buildVersions.compileSdkVersion

    defaultConfig {
        applicationId "com.alvindizon.panahon"
        minSdk buildVersions.minSdkVersion
        targetSdk buildVersions.targetSdkVersion
        versionCode 1
        versionName "0.1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        buildConfigField "String", "UNSPLASH_KEY", "\"" + getAccessKey('UNSPLASH_KEY') + "\""
        buildConfigField "String", "OPENWEATHER_KEY", "\"" + getAccessKey('OPENWEATHER_KEY') + "\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += [
                "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-opt-in=androidx.compose.foundation.ExperimentalFoundationApi",
                "-opt-in=androidx.compose.ui.ExperimentalComposeUiApi",
                "-opt-in=kotlinx.coroutines.FlowPreview",
                "-opt-in=androidx.compose.animation.ExperimentalAnimationApi"
        ]
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion versions.composeCompilerVersion
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    implementation project(":data:networking")
    implementation project(":data:api")
    implementation project(":data:db")
    implementation project(":common:design")
    implementation project(":common:core")
    implementation project(":common:navigation")
    implementation project(":common:preferences")
    implementation project(":feature:locations")
    implementation project(":feature:searchlocation")
    implementation project(":feature:details")
    implementation project(":feature:home")
    implementation project(":feature:settings")
    // Compose
    implementation platform(deps.androidX.compose.bom)
    implementation deps.androidX.compose.runtime
    implementation deps.androidX.compose.ui
    implementation deps.androidX.compose.foundationLayout
    implementation deps.androidX.compose.material
    implementation deps.androidX.compose.materialIconsExtended
    implementation deps.androidX.compose.foundation
    implementation deps.androidX.compose.animation
    implementation deps.androidX.compose.uiTooling
    implementation deps.androidX.compose.runtimeLivedata

    // Compose navigation
    implementation deps.androidX.navigation

    // Room
    implementation deps.androidX.room.runtime
    kapt deps.androidX.room.compiler
    implementation deps.androidX.room.roomKtx

    // Coroutines
    implementation deps.coroutines.core
    implementation deps.coroutines.android

    // Coroutine Lifecycle Scopes
    implementation deps.androidX.lifecycleRuntimeKtx

    // Retrofit
    implementation deps.network.retrofit.retrofit
    implementation deps.network.moshi.moshi
    implementation deps.network.retrofit.moshiConverter
    implementation deps.network.interceptor
    kapt deps.network.moshi.codegen

    implementation deps.androidX.activityCompose
    implementation deps.androidX.coreKtx

    // Testing
    testImplementation deps.junit
    testImplementation deps.androidX.test.core
    testImplementation deps.mockk
    androidTestImplementation platform(deps.androidX.compose.bom)
    androidTestImplementation deps.androidX.test.testExtJunit
    androidTestImplementation deps.androidX.test.espresso
    androidTestImplementation deps.androidX.compose.junit4
    debugImplementation deps.androidX.compose.uiTooling

    // Dagger Hilt
    implementation deps.dagger.hiltAndroid
    kapt deps.dagger.hiltCompiler
    kapt deps.androidX.hiltCompiler
    implementation deps.androidX.hiltNavigationCompose

    // Coil
    implementation deps.coilCompose

    // Accompanist
    implementation deps.accompanist.navigationAnimation
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        // Treat all Kotlin warnings as errors (disabled by default)
        allWarningsAsErrors = project.hasProperty("warningsAsErrors") ? project.warningsAsErrors : false

        freeCompilerArgs += '-Xopt-in=kotlin.RequiresOptIn'
        // Enable experimental coroutines APIs, including Flow
        freeCompilerArgs += '-Xopt-in=kotlin.Experimental'

        // Set JVM target to 1.8
        jvmTarget = "1.8"
    }
}

String getAccessKey(String keyName) {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def applicationKey = properties.getProperty(keyName)
    if (applicationKey == null || "" == applicationKey) {
        throw new IllegalStateException("Set your ${keyName} access key in local.properties file.")
    }
    return applicationKey
}
