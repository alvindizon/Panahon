plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdk rootProject.compileSdkVersion

    defaultConfig {
        applicationId "com.alvindizon.panahon"
        minSdk rootProject.minSdkVersion
        targetSdk rootProject.targetSdkVersion
        versionCode 1
        versionName "0.1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        buildConfigField "String", "UNSPLASH_KEY", "\"" + getAccessKey('UNSPLASH_KEY') + "\""
        buildConfigField "String", "OPENWEATHER_KEY", "\"" + getAccessKey('OPENWEATHER_KEY') + "\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += [
                "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-Xopt-in=androidx.compose.foundation.ExperimentalFoundationApi",
                "-Xopt-in=androidx.compose.ui.ExperimentalComposeUiApi",
                "-Xopt-in=kotlinx.coroutines.FlowPreview"
        ]
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion composeVersion
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    // Compose
    implementation "androidx.compose.runtime:runtime:$composeVersion"
    implementation "androidx.compose.ui:ui:$composeVersion"
    implementation "androidx.compose.foundation:foundation-layout:$composeVersion"
    implementation "androidx.compose.material:material:$composeVersion"
    implementation "androidx.compose.material:material-icons-extended:$composeVersion"
    implementation "androidx.compose.foundation:foundation:$composeVersion"
    implementation "androidx.compose.animation:animation:$composeVersion"
    implementation "androidx.compose.ui:ui-tooling:$composeVersion"
    implementation "androidx.compose.runtime:runtime-livedata:$composeVersion"

    // Compose navigation
    implementation "androidx.navigation:navigation-compose:$navigationVersion"

    // Room
    implementation "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"

    // Coroutine Lifecycle Scopes
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.moshi:moshi:$moshiVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion"

    implementation "androidx.activity:activity-compose:$appCompatVersion"
    implementation "androidx.core:core-ktx:$ktxVersion"

    // Testing
    testImplementation "org.junit.jupiter:junit-jupiter:$junit5Version"
    testImplementation "androidx.arch.core:core-testing:$coreTestingVersion"
    testImplementation "io.mockk:mockk:$mockkVersion"
    androidTestImplementation "androidx.test.ext:junit:$testExtJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$composeVersion"
    debugImplementation "androidx.compose.ui:ui-tooling:$composeVersion"

    // Dagger Hilt
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    kapt "com.google.dagger:hilt-android-compiler:$hiltVersion"
    kapt "androidx.hilt:hilt-compiler:$hiltAndroidXVersion"
    implementation "androidx.hilt:hilt-navigation-compose:$hiltNavComposeVersion"

    // Coil
    implementation "io.coil-kt:coil-compose:$coilVersion"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        // Treat all Kotlin warnings as errors (disabled by default)
        allWarningsAsErrors = project.hasProperty("warningsAsErrors") ? project.warningsAsErrors : false

        freeCompilerArgs += '-Xopt-in=kotlin.RequiresOptIn'
        // Enable experimental coroutines APIs, including Flow
        freeCompilerArgs += '-Xopt-in=kotlin.Experimental'

        // Set JVM target to 1.8
        jvmTarget = "1.8"
    }
}

String getAccessKey(String keyName) {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def applicationKey = properties.getProperty(keyName)
    if (applicationKey == null || "" == applicationKey) {
        throw new IllegalStateException("Set your ${keyName} access key in local.properties file.")
    }
    return applicationKey
}
